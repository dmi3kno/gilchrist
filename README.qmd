---
format: gfm
bibliography: "data-raw/gilchrist-package.bib"
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r}
#| include: false
#| 
if (!interactive())
  rbbt::bbt_write_bib('data-raw/gilchrist-package.bib', translator='bibtex', overwrite = TRUE)
```


```{r}
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# gilchrist <a href='https://dmi3kno.github.io/gilchrist'><img src='man/figures/logo.png' align="right" height="200" /></a>

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
<!-- badges: end -->

This package is made to honor the legacy and memory of Warren G. Gilchrist (1932-2015)^[See @davies2016WarrenGilchrist19322015 for a short biography of this truly remarkable individual].

The goal of `{gilchrist}` is to implement Gilchrist QF transformation rules [@gilchrist2000StatisticalModellingQuantile] in R in the form of pipeable function factories.

## Installation

You can install the development version of gilchrist like so:

``` r
remotes::install_packages("dmi3kno/gilchrist")
```
## Gilchrist's QF transformation rules

@gilchrist2000StatisticalModellingQuantile list the following rules for creating new quantile functions out of existing ones.

| Original QF  | Rule          | Resulting QF | Resulting variable |
| ------------ | ------------- | ------------ | ------------------ |
| $Q_Y(u)$     | Relection rule| $-Q(1-u)$ | QF of $-Y$ | 
| $Q_Y(u)$ | Reciprocal rule  | $1/Q(1-u)$ | QF of $1/Y$ |
| $Q_1(u),Q_2(u)$ | Addition rule  | $Q_1(u)+Q_2(u)$ | Valid QF |
| $Q_1(u),Q_2(u)$ | Linear combination rule  | $aQ_1(u)+bQ_2(u)$ | Valid QF for a,b>0 |
| $Q_1(u),Q_2(u)>0$ | Multiplication rule  | $Q_1(u)Q_2(u)$ | Valid QF if $Q_1(u),Q_2(u)>0$ |
| $Q_Y(u)$ | Q-transformation  | $T(Q_Y(u))$ | QF of $T(Y)$, for non-decreasing $T$ |
| $Q_Y(u)$ | p-transformation  | $Q_Y(H(u))$ | p-transformed $Q_Y(u)$, for non-decreasing $H$ |


## Example

`{gilchrist}` is a special package! It uses `{magrittr}` pipe `%>%` to operate not on data, but on functions. It is a function factory engine!

This is a basic example which shows you how to solve a common problem.

```{r}
#| label: example
library(gilchrist)
library(magrittr)
## basic example code
```

In using and testing quantile function it is useful to have an equi-spaced grid of probabilities

```{r}
p_grd <- ppoints(15)
```

### Exponential

Start with standard exponential quantile function. Note that this "basic quantile function" has no parameters. 

$$S(u)=-\ln(1-u)$$

The built-in equivalent in `{gilchrist}` is `s_exp()`. It is a regular R function, so we can inspect it.

```{r}
s_exp
```

```{r}
#| output: 'asis'
display(s_exp)
```

`{gilchrist}` has several basic (parameterless) functions that you can modify.

- `s_exp()`: Basic QF of exponential distribution 
- `s_unif()`: Basic QF of uniform distribution 
- `s_norm()`: Basic QF of normal distribution, a thinly wrapped `qnorm(u,0,1)`. 
- `s_cauchy()`: Basic QF of Cauchy distribution. 
- `s_halftriang()`⁠: Basic QF of half-triangular distribution.
- `s_halfcosine()`: Basic QF of half-cosine distribution
- `s_sech()`: Basic QF of hyperbolic secant distribution.

We will now add a scale parameter to our basic exponential QF to make it like in [Wikipedia](https://en.wikipedia.org/wiki/Exponential_distribution).

$$Q(u)=\frac{1}{\lambda}[-\ln(1-u)]$$

We can add a scale parameter $\frac{1}{\lambda}$ (`qexp` has a reciprocated scale).

```{r}
#| label: logistic
qf_exp <- s_exp %>% 
  qtr_scale(nm_scale="lambda", .invert = TRUE)
```

```{r}
#| output: 'asis'
display(qf_exp)
```

We compare our hand-made exponential quantile function to the standard function in R. 

```{r}
qf_exp(p_grd, lambda=10)
# compare to standard exponential quantile function. 
qexp(p_grd, 10)
```

### Logistic

Let's do a more challenging example. We will make a logistic distribution in `{gilchrist}`. Logistic distribution consists of exponential $-\ln(1-u)$ and reflected exponential $\ln(u)$ distributions. 

$$Q(u)=\mu+s\ln\left(\frac{u}{1-u}\right)=\mu+s\left[\ln(u)-\ln(1-u)\right]$$
This is how we do it. Note that in the resulting quantile function, the arguments have to always be named.

```{r}
#| output: 'asis'
qf_logistic <- s_exp %>% 
  qtr_reflect() %>%
  qtr_add(s_exp)# %>% 
  qtr_decorate("mu", "s")

display(qf_logistic)
```

```{r}
qf_logistic(p_grd, mu=4, s=2)
qlogis(p_grd, 4, 2)
```

### Flattened Skew-Logistic

Can we add a little flatness to our newly made logistic distribution and introduce the weights by the exponential components? Lets make Flattened Skew-Logistic Distribution described in @sharma2020QuantileBasedApproachSupervised.

$$Q(u)=\alpha+\beta[(1-\delta)\ln(u)-\delta\ln(1-u)+ku]$$

Note that the exponential distribution will gain a weight `delta` and the reflected exponential will gain a weight `1-delta`, because this is the order in which they are listed in `qtr_mix`.

```{r}
#| output: 'asis'
qf_fsld <- s_exp %>% 
  qtr_reflect() %>%
  qtr_cmix(s_exp, nm_wt="delta") %>% 
  qtr_add(qtr_scale(s_unif,"k")) %>% 
  qtr_decorate(nm_location="alpha", nm_scale="beta")
display(qf_fsld)
```

```{r}
qf_fsld(p_grd, delta=0.21, alpha=4, beta=2, k=1)
qpd::qfsld(p_grd, bt=2, k=1, dlt=0.21, a=4)
```

### Weibull

We can make Weibull distribution. Weibull distribution is a Q-transformed  exponential distribution. The transformation function is the the Lehmann type 1 exponentiation $H(u)=u^{1/k}$.

$$Q(u)=\lambda[-\ln(1-u)]^{\frac{1}{k}}$$

working

$$
Q(u)={ {\lambda} }\left[\left[-\ln(1- {u} )\right]^{1/k}\right]
$$

Again, to remember that the power should be reciprocated, which comes by default.

```{r}
#| output: 'asis'
qf_weibull <- s_exp %>% 
  qtr_lehmann1("k") %>% 
  qtr_scale("lambda")
display(qf_weibull)
```

```{r}
qf_weibull(p_grd, lambda=2, k=4)
qweibull(p_grd, scale=2,  shape=4)
```

Therefore, you can compose new quantile functions following Gilchrist transformation rules.

## Function factories

The package implements several basic operations which can be performed with quantile functions. First five of them implement Gilchrist's rules:

### Reflection

A quantile function factory `qtr_reflect` implement the "reflection rule". Here's an example of reflected exponential distribution.

```{r}
#| output: 'asis'
qrexp <- s_exp %>% 
  qtr_reflect()
display(qrexp)
```

```{r}
qrexp(p_grd) %>% plot(p_grd,., type="l")
```

### Reciprocation

A quantile function factory `qtr_reciprocate` implement the "reciprocatal rule". Here's an example of reciprocated uniform distribution.

```{r}
#| output: 'asis'
qrecunif <- s_unif %>% 
  qtr_reciprocate()
display(qrecunif)
```

```{r}
qrecunif(p_grd) %>% plot(p_grd,., type="l")
```

### Addition

A quantile function factory `qtr_add` implement the "addition rule". Here's an example of sum of exponential and reflected exponential distributions.

```{r}
#| output: 'asis'
qlogistic <- s_exp %>% 
  qtr_reflect() %>% 
  qtr_add(s_exp)
display(qlogistic)
```

```{r}
qlogistic(p_grd) %>% plot(p_grd,., type="l")
```

### Linear combination

A quantile function factory `qtr_mix` implement the "linear combination rule" with a particular values of $a$ and $b$ adding up to 1. Here's an example of sum of skew-logistic distribution implemented as a weighted mix of exponential and reflected exponential distributions. Note that the first function (in this case `s_exp`) gets the weight $\delta$ and the second (reflected `s_exp`) gets the weight $1-\delta$. 

```{r}
#| output: 'asis'
qskewlogis <- s_exp %>% 
  qtr_reflect() %>% 
  qtr_cmix(s_exp, nm_wt="delta")

display(qskewlogis)
```

```{r}
qskewlogis(p_grd, delta=0.9) %>% plot(p_grd,., type="l")
```

The twin function `qtr_cmix` swaps the weights: $1-\delta$ to the first function and $\delta$ to the second function.

### Multiplication

A quantile function factory `qtr_multiply` implement the "multiplication rule" for positive quantile functions. Here's an example of multiplied half-cosine and exponential distributions

```{r}
#| output: 'asis'
qhcsexp <- s_halfcosine %>% 
  qtr_multiply(s_exp)

display(qhcsexp)
```

```{r}
qhcsexp(p_grd) %>% plot(p_grd,., type="l")
```

### Shift and scale

The  quantile function factory `qtr_shift` implement the "addition rule" but for parameters. It allows to add a location parameter to any part of the QF. Here's for example shifted exponential distribution (starting at 2).

```{r}
q_shiftedexp <- s_exp %>% qtr_shift("mu")
q_shiftedexp(p_grd, mu=2) %>% plot(p_grd,., type="l")
```

The  quantile function factory `qtr_scale` implement the "multiplication rule" but for parameters: it can add a scale parameter to the QF, provided it is positive. The scale can be inverted, if necessary (as the case is with exponential distribution)

```{r}
qexp1 <- s_exp %>% 
  qtr_scale("lambda", .invert = TRUE)
qexp1(p_grd, lambda=2) %>% plot(p_grd,., type="l")
```

Finally, `qtr_decorate` adds both location and scale to a quantile function.

```{r}
qlogistic <- s_exp %>%
  qtr_reflect() %>%
  qtr_add(s_exp) %>%
  qtr_decorate(nm_location = "mu", nm_scale = "s")

all.equal(
  qlogistic(p_grd, mu=3, s=2),
  qlogis(p_grd, location = 3, scale=2)
)
```

## Transformations

`gilchrist` also implements several popular Q-transformations and p-transformations. 

### Power (Lehmann transformations)

Raising the quantile function to power results in a valid distribution only if the power is positive. Here's Weibull, which is Lehmann Type I transformed exponential.

```{r}
qweibull1 <- s_exp %>% 
  qtr_lehmann1("k") %>% 
  qtr_scale("lambda")

qweibull1(p_grd, lambda=2, k=3) %>% 
  plot(p_grd,., type="l")
```

The analogous function exists for p-transforming the quantile function, i.e. raising the depth $u$ to the power $.pow$ (or its inverse).

Lehmann transformations have been proposed for transforming CDF (Type I) and the CCDF (Type II). When expressed in terms of quantile function, these transformations become: 

$$
H(u)=u^\frac{1}{\alpha}
$$

and 

$$
H(u)=1-(1-u)^\frac{1}{\beta}
$$

Remarkaby, Kumaraswamy distribution is a combination of these two transformations

$$
Q(u)=\left(1-\left(1-u\right)^\frac{1}{b}\right)^\frac{1}{a}
$$


```{r}
#| output: 'asis'
qkumar1 <- s_unif %>%
  ptr_lehmann2("beta") %>%
  qtr_lehmann1("alpha")

display(qkumar1)
```

```{r}
all.equal(
 extraDistr::qkumar(p_grd, 4,5),
  qkumar1(p_grd, alpha=4, beta=5)
)
```

An interesting distribution is (exponentiated) inverse Kumaraswamy [@reddy2024AcceptanceSamplingPlans]

$$
Q(u)=\left[1-u^{\frac{1}{\lambda\beta}}\right]^{-\frac{1}{\alpha}}-1
$$

```{r}
#| output: 'asis'
qeik <- s_unif %>%
  ptr_lehmann2("beta") %>%
  qtr_lehmann1("alpha") %>%
  qtr_reciprocate() %>%
  qtr_shift(shift=-1) %>%
  ptr_lehmann1("lambda")

q_eik <- function(u, lambda, beta, alpha){
  (1-u^(1/(beta*lambda)))^(-1/alpha)-1
}
display(qeik)
```
```{r}

all.equal(
 qeik(p_grd, alpha=4,beta=5, lambda=6),
 q_eik(p_grd, alpha=4,beta=5, lambda=6)
)

qeik(p_grd, alpha=4,beta=5, lambda=6) %>%
  plot(p_grd,.,type="l")

```


### Exponentiation

Raising the parameter to the power of quantile function. 

### Function

Applying arbitrary function (without parameters) to the quantile function `qtr_fun` or the depth `ptr_fun`.

Lets create a U-shaped Chen distribution described in @chen2000NewTwoparameterLifetime. The quantile function of Chen ditribution is

$$
Q(u)=\left[\ln\left(1-\frac{\ln(1-u)}{\lambda}\right)\right]^{1/\beta}
$$


```{r}
#| output: 'asis'
qchen <- s_exp %>% 
  qtr_scale("lambda") %>% 
  qtr_fun(log1p) %>% 
  qtr_lehmann1("beta")
display(qchen)
```


### Shift/scale/power by a constant

The transformations where the shift, scale or power is a constant rather than a parameter.

### SHASH-transformation

SHASH (sinh-asinh) q-transformation is used in Johnson SU distribution and was further developed by @rigby2005GeneralizedAdditiveModels and @jones2009SinharcsinhDistributions. The transformation has the form

$$
T(u)=\sinh\left[\frac{1}{\delta}\left[\text{asinh}(Q(u))-\epsilon\right]\right]
$$

Here's for example SHASH-normal distribution

```{r}
#| output: 'asis'
qshashnorm <- s_norm %>%
  qtr_shash(nm_tail="delta", nm_asymm="epsilon")
display(qshashnorm)
```
```{r}
qs <- qshashnorm(p_grd, delta=2, epsilon=2)
plot(p_grd, qs, type="l")
```


### $\varepsilon$-transformation

Unit transformation described by @bakouch2023UnitExponentialProbability for positive distributions.

$$
T(u)=\frac{(1+u)^{1/\beta}-1}{(1+u)^{1/\beta}+1}
$$

In particular they present the unit exponential QF as

```{r}
#| output: 'asis'
quexp <- s_exp %>%
  qtr_scale("lambda", .invert=TRUE) %>%
  qtr_epsilon("beta")
display(quexp)
```

We could transform another semi-bounded distribution, like Pareto

```{r}
#| output: 'asis'
# for positive alpha
qupareto <- s_unif %>%
  qtr_reciprocate() %>%
  qtr_lehmann1("alpha") %>%
  qtr_epsilon("beta")
display(qupareto)
```
```{r}
qs <- qupareto(p_grd, 3, 0.1)
plot(p_grd, qs, type="l")

```

### DUS-transformation

Finally, we can apply the DUS-transformation proposed by @kumar2015MethodProposingNew

$$
H(u)=\ln(1-u+eu)
$$

The authors used it to transform exponential distribution

```{r}
#| output: 'asis'
qDUSexp <- s_exp %>%
  qtr_scale("lambda", .invert = TRUE) %>%
  ptr_DUS()

qs <- qDUSexp(p_grd, lambda=0.5)
display(qDUSexp)
```
```{r}
plot(p_grd, qs, type="l")
lines(p_grd, qexp(p_grd, 0.5), col=2)

```


### Kavya-Manoharan (KM) p-transformation

This p-transformation proposed in @kavya2021ParsimoniousModelsLifetimes is the reflected and shifted DUS transformation we considered above. It could as well be called DUS Type II transformation

$$
H(u)=-\ln\left(1-u\frac{e-1}{e}\right)
$$

The authors apply this p-transformation to Weibuill distribution

```{r}
#| output: 'asis'
qf_KMweibull <- s_exp %>% 
  qtr_lehmann1("k") %>% 
  qtr_scale("lambda") %>% 
  ptr_KM()
display(qf_KMweibull)
```
```{r}
qf_KMweibull(p_grd, lambda=3, k=4)%>%
  plot(p_grd,., type="l")
```

### Modi-transformation

Modi-transformation is a p-transformation of the following form

$$
H(u)=\frac{u\alpha^\beta}{1-u+\alpha^\beta}
$$

Modi-transformed exponentiated exponential distribution

```{r}
#| output: 'asis'
qmodiexpexp <- s_exp %>%
  qtr_scale("lambda") %>%
  ptr_lehmann1("delta") %>%
  ptr_modi1("alpha", "beta")
  
qmodiexpexp1 <- function(u, lambda, alpha, beta, delta){
  1/lambda*(-log(1-(u*alpha^beta/(1-u+alpha^beta))^(1/delta)))
}
display(qmodiexpexp)
```
```{r}
qmodiexpexp(p_grd, lambda=3, alpha=2, beta=0.1, delta=5)
qmodiexpexp1(p_grd, lambda=3, alpha=2, beta=0.1, delta=5)

```

## Other examples

Dagum distribution seems to be a product of inverse Kumaraswamy and Lehmann Type I transformed uniform distribution.

$$
\begin{gathered}
Q(u)=b(u^{-\frac{1}{p}}-1)^{-\frac{1}{a}}\\
Q(u)=\frac{bu^{\frac{1}{pa}}}{\left(1-u^{\frac{1}{p}}\right)^\frac{1}{a}}
\end{gathered}
$$

```{r}
qdagum_raw <- function(u, b, p, a){
  mip <- -1/p
  mia <- -1/a
  b*(u^mip-1)^mia
}

qdagum <- s_unif %>%
  ptr_lehmann2("p") %>%
  qtr_lehmann1("a") %>%
  qtr_reciprocate() %>%
  qtr_multiply(
    qtr_lehmann1(s_unif, "a") %>%
      qtr_lehmann1("p")
  ) %>%
  qtr_scale("b")

qs1 <- qdagum_raw(p_grd, b=2, p=3, a=4)
qs2 <- qdagum(p_grd, b=2, p=3, a=4)
all.equal(qs1,qs2)

```


Interesting "bathtube-shaped" distribution proposed by @muhammad2023NewThreeparameterModel

$$
Q(u)=\theta\exp\left[\frac{1}{\beta}\left(1-u^{-\frac{1}{\alpha}}\right)\right]
$$

```{r}
#| output: 'asis'
qmuhammad <- s_unif %>% 
  qtr_reciprocate() %>% 
  qtr_reflect() %>% 
  qtr_shift(shift=1) %>% 
  qtr_scale("beta") %>% 
  qtr_fun(exp) %>% 
  qtr_scale("theta") %>% 
  ptr_lehmann1("alpha")
display(qmuhammad)
```

```{r}
qmuhammad(runif(1e3), theta=2, beta=7, alpha=0.7) %>% hist(50)
```

Fréchet is Reciprocate transform of Weibull. Weibull is power transform of Exponential. 

$$
Q(u)=m+s(-\ln u)^{-1/\alpha}
$$

```{r}
qfrechet <- s_exp %>%
  qtr_lehmann1("alpha") %>%
  qtr_reciprocate() %>%
  qtr_decorate("m", "s")

qfrechet(p_grd, m=0, s=1, alpha=5)%>%plot(p_grd, ., type="l")
```

What other cool transformations do you know? Please let me know!

## References

